<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util" 
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
     http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
     http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!-- 添加mvc注解扫描 -->
	<mvc:annotation-driven/>
	
	<!-- 配置组件扫描，排除控制层 -->
	<context:component-scan base-package="com.yh">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
 	<!-- 添加数据库配置文件 -->
 	<bean id="jdbcConfig"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:jdbc.properties</value>               
            </list>  
        </property>  
    </bean>  
    <!-- 配置c3p0连接池 -->
    <bean id="dataSourceLocal" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
           <!-- 指定连接数据库的驱动-->  
           <property name="driverClass" value="${jdbc.driverClass}"/>  
           <!-- 指定连接数据库的URL-->  
           <property name="jdbcUrl" value="${jdbc.url}"/>  
           <!-- 指定连接数据库的用户名-->  
           <property name="user" value="${jdbc.user}"/>  
           <!-- 指定连接数据库的密码-->  
           <property name="password" value="${jdbc.password}"/>  
           <!-- 指定连接池中保留的最大连接数. Default:15-->  
           <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>  
           <!-- 指定连接池中保留的最小连接数-->  
           <property name="minPoolSize" value="${jdbc.minPoolSize}"/>  
           <!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->  
           <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>  
           <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->  
           <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>  
           <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->  
           <property name="maxStatements" value="${jdbc.maxStatements}"/>  
           <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->  
           <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>  
       </bean>  
	<!-- 配置SessionFactory spring集成hibernate -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSourceLocal" /><!-- 引用数据源 -->
        <property name="packagesToScan">
            <list>
                <value>com.yh.dto</value><!-- 加载hibernate的jpa注解形式的实体类 -->
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>
    
    <!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
    	<property name="sessionFactory" ref="sessionFactory" />  
	</bean> 
      
    <!-- 下面使用aop切面的方式来实现 -->  
    <tx:advice id="testAdvice" transaction-manager="transactionManager">  
        <!--配置事务传播性，隔离级别以及超时回滚等问题 -->  
        <tx:attributes>  
        	<tx:method name="query*" read-only="true"/>
        	<tx:method name="get*" read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="del*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="*" rollback-for="Exception" />  
        </tx:attributes>  
    </tx:advice>  
    
    <!-- 配置aop拦截 -->
    <aop:config>  
        <!--配置事务切点 -->  
        <aop:pointcut id="servicePointcut" expression="execution(* com.yh.service.*.*(..))" />  
        <aop:advisor pointcut-ref="servicePointcut" advice-ref="testAdvice" />  
    </aop:config> 
	
</beans>




